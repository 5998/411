<?php

namespace FOO;

/**
 * Class ProxyAuth
 * Handles authentication related functionality.
 * @package FOO
 */
class ProxyAuth {

    public static $enabled = false;
    public static $header_name = null;
    public static $auto_sign_up = false;

    public static function init() {
      $cfg = Config::get('proxy_auth');

      if(is_null($cfg['enabled']) || !$cfg['enabled']){
        return;
      }
      if(!is_null($cfg['$auto_sign_up']) {
        $auto_sign_up = $cfg['$auto_sign_up'];
      }
      $header_name = sprintf('HTTP_%s', strtoupper(str_replace("-","_", $cfg['header_name'])));
    }

    public static function isEnabled() {
      return $enabled;
    }

    public static function autoSignup() {
      return $auto_sign_up;
    }

    public static function createUser() {
      $user = new FOO\User();
      $user['name'] = self::getUserName();
      $user['real_name'] = 'Proxy Auth';
      $user['password'] = password_hash(FOO\Random::base64_bytes(12), PASSWORD_DEFAULT);
      $user['email'] = 'generated by Proxy Auth';
      $user['admin'] = 'n';
      $user['api_key'] = FOO\Random::base64_bytes(FOO\User::API_KEY_LEN);
      $user->store();

      return $user
    }

    public static function available() {
      if(!$enabled){
        return false;
      }
      if(array_key_exists($header_name, $_SERVER) {
        if(strlen($_SERVER[$header_name]) == 0) {
          return false;
        }
        return true;
      }
      return false;
    }

    public static function getUserName(){
      return $_SERVER[$header_name];
    }
}
